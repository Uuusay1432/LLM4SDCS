//*****************************************************************************
// Environment
//*****************************************************************************

const N = 4

set VisitorAction = {reqEnter_Hall,reqEnter_A,reqEnter_B,reqEnter_C,reqEnter_D,reqOut}
set LockAction    = {lock_Hall,lock_A,lock_B,lock_C,lock_D,unLock_Hall,unLock_A,unLock_B,unLock_C,unLock_D}
set AllowAction   = {allow_Hall,allow_A,allow_B,allow_C,allow_D,allow_Out,deny_Hall,deny_A,deny_B,deny_C,deny_D,deny_Out}
set DoorAction    = {LockAction,AllowAction,resRoomStatus}
set MonitorAction = {notEnter,arrive_Hall[1..N],arrive_A[1..N],arrive_B[1..N],arrive_C[1..N],arrive_D[1..N],leave}
set AllAction     = {VisitorAction,DoorAction,MonitorAction}
set ControllableActions = {DoorAction}

VISITOR = VISIT,
VISIT =
(
	reqEnter_Hall  -> resRoomStatus -> CHECK_HALL
    |reqEnter_A    -> resRoomStatus -> CHECK_A
    |reqEnter_B    -> resRoomStatus -> CHECK_B
    |reqEnter_C    -> resRoomStatus -> CHECK_C
    |reqEnter_D    -> resRoomStatus -> CHECK_D
    |reqOut        -> resRoomStatus -> CHECK_OUT
),
CHECK_HALL = (allow_Hall -> arrive_Hall[1..N] -> VISIT | deny_Hall -> notEnter -> VISIT),
CHECK_A    = (allow_A    -> arrive_A[1..N]    -> VISIT | deny_A    -> arrive_Hall[1..N] -> VISIT),
CHECK_B    = (allow_B    -> arrive_B[1..N]    -> VISIT | deny_B    -> arrive_A[1..N] -> VISIT),
CHECK_C    = (allow_C    -> arrive_C[1..N]    -> VISIT | deny_C    -> arrive_B[1..N] -> VISIT),
CHECK_D    = (allow_D    -> arrive_D[1..N]    -> VISIT | deny_D    -> arrive_C[1..N] -> VISIT),
CHECK_OUT  = (allow_Out  -> leave             -> VISIT | deny_Out  -> arrive_D[1..N] -> VISIT).


HALL = HALL[0],
HALL[n:0..N]   = (when(n!=N) allow_Hall -> arrive_Hall[n+1] -> HALL[n+1]   |when(n!=N) deny_A -> arrive_Hall[n+1] -> HALL[n+1]  |when(n!=0) reqEnter_A -> HALL[n-1]).
ROOM_A = ROOM_A[0],
ROOM_A[n:0..N] = (when(n!=N) allow_A    -> arrive_A[n+1]    -> ROOM_A[n+1] |when(n!=N) deny_B -> arrive_A[n+1] -> ROOM_A[n+1]   |when(n!=0) reqEnter_B -> ROOM_A[n-1]).
ROOM_B = ROOM_B[0],
ROOM_B[n:0..N] = (when(n!=N) allow_B    -> arrive_B[n+1]    -> ROOM_B[n+1] |when(n!=N) deny_C -> arrive_B[n+1] -> ROOM_B[n+1]   |when(n!=0) reqEnter_C -> ROOM_B[n-1]).
ROOM_C = ROOM_C[0],
ROOM_C[n:0..N] = (when(n!=N) allow_C    -> arrive_C[n+1]    -> ROOM_C[n+1] |when(n!=N) deny_D -> arrive_C[n+1] -> ROOM_C[n+1]   |when(n!=0) reqEnter_D -> ROOM_C[n-1]).
ROOM_D = ROOM_D[0],
ROOM_D[n:0..N] = (when(n!=N) allow_D    -> arrive_D[n+1]    -> ROOM_D[n+1] |when(n!=N) deny_Out -> arrive_D[n+1] -> ROOM_D[n+1] |when(n!=0) reqOut -> ROOM_D[n-1]).


DOOR_LOCK_HALL = LOCK_HALL,
LOCK_HALL = (lock_Hall -> unLock_Hall -> LOCK_HALL).

DOOR_LOCK_A = LOCK_A,
LOCK_A = (lock_A -> unLock_A -> LOCK_A).

DOOR_LOCK_B = LOCK_B,
LOCK_B = (lock_B -> unLock_B -> LOCK_B).

DOOR_LOCK_C = LOCK_C,
LOCK_C = (lock_C -> unLock_C -> LOCK_C).

DOOR_LOCK_D = LOCK_D,
LOCK_D = (lock_D -> unLock_D -> LOCK_D).


||Environment= (VISITOR||HALL||ROOM_A||ROOM_B||ROOM_C||ROOM_D||DOOR_LOCK_HALL||DOOR_LOCK_A||DOOR_LOCK_B||DOOR_LOCK_C||DOOR_LOCK_D).